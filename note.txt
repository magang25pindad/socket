const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const axios = require('axios');


axios.get('http://192.168.196.235:3077/logs/endpoint', {
    auth: {
        username: 'admin',
        password: 'admin123' // <- ganti dengan yang sesuai
    }
})
.then(res => console.log(res.data))
.catch(err => console.error('Error:', err.response.status, err.message));

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: { origin: '*' } // agar bisa diakses dari frontend Laravel
});

const PORT = 3000; // ganti port jika perlu

// Tes route biasa (bisa diakses via browser)
app.get('/', (req, res) => {
    res.send('Node.js + Express + Socket.IO server aktif!');
});

// WebSocket client connect
io.on('connection', (socket) => {
    console.log('Client terhubung:', socket.id);

    socket.on('disconnect', () => {
        console.log('Client terputus:', socket.id);
    });
});

// Polling ke API eksternal (192.168.196.235)
const apiURL = 'http://192.168.196.235:3077/logs/endpoint';

setInterval(async () => {
    try {
        const res = await axios.get(apiURL, {
            auth: {
                username: 'admin',
                password: 'admin123'
            }
        });

        console.log('RESPON MENTAH:', res.data);
        
        const data = res.data;
        io.emit('device-status', data);
        console.log('Data dikirim ke client:', data);

    } catch (error) {
        console.error('Gagal ambil data:', error.response?.status, error.message);
    }
}, 10000);

// Start server
server.listen(PORT, () => {
    console.log(`Server berjalan di http://localhost:${PORT}`);
});



Berikut adalah **contoh lengkap server `Socket.IO`** dengan **fitur `event` listener dan `emit`**:

---

## âœ… File: `server.js` (Node.js)

```js
const { Server } = require("socket.io");
const http = require("http");

// Setup server HTTP
const server = http.createServer();
const io = new Server(server, {
    cors: {
        origin: "*", // biarkan semua origin (atau sesuaikan jika perlu)
        methods: ["GET", "POST"]
    }
});

// Saat client terhubung
io.on('connection', (socket) => {
    console.log('Client connected:', socket.id);

    // Kirim event ke client setelah terhubung
    socket.emit('server:welcome', { message: 'Selamat datang dari server Socket.IO!', id: socket.id });

    // Dengarkan event dari client
    socket.on('client:ping', (data) => {
        console.log('Client kirim ping:', data);

        // Balas ke client
        socket.emit('server:pong', {
            message: 'Pong dari server',
            received: data,
            time: new Date()
        });
    });

    // Broadcast ke semua client (termasuk pengirim)
    socket.on('device:update', (data) => {
        console.log('Broadcast device update:', data);
        io.emit('device:update', data); // broadcast ke semua
    });

    // Jika client disconnect
    socket.on('disconnect', () => {
        console.log('Client disconnected:', socket.id);
    });
});

// Jalankan server di port 3000
server.listen(3000, () => {
    console.log('Socket.IO server berjalan di http://localhost:3000');
});
```

---

## ðŸ“¦ Cara Menjalankan:

1. Buat folder baru dan masuk ke dalamnya
2. Jalankan:

```bash
npm init -y
npm install socket.io
```

3. Buat file `server.js` dan isi dengan kode di atas
4. Jalankan server:

```bash
node server.js
```

---

## ðŸ”„ Tes Event dari Client (Laravel)

Contoh kirim `client:ping` dari Laravel (client Socket.IO):

```js
socket.emit('client:ping', { user: 'admin', waktu: new Date() });
```

Server akan membalas event `server:pong`.

---

## ðŸŽ¯ Event Daftar (Server â‡„ Client)

| Arah            | Nama Event       | Keterangan                    |
| --------------- | ---------------- | ----------------------------- |
| Server â†’ Client | `server:welcome` | Saat pertama terhubung        |
| Client â†’ Server | `client:ping`    | Client kirim ping ke server   |
| Server â†’ Client | `server:pong`    | Server balas `client:ping`    |
| Client â‡„ Server | `device:update`  | Untuk broadcast status device |

---
 {
    contact: '-',
    endpoint: '1081',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1082',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1083',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1084',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1085',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1086',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1087',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1088',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1089',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1090',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1091',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1092',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1093',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1094',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1095',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1096',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1097',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '-',
    endpoint: '1098',
    status: 'Unavailable 0 of',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '192.168.196.182',
    endpoint: '1099',
    status: 'Not in use',
    timestamp: '2025-07-16 08:17:05'
  },
  {
    contact: '192.168.196.182',
    endpoint: '1001',
    status: 'Not in use',
    timestamp: '2025-07-16 08:17:15'
  },
  ... 7523 more items
]
Client terputus: FCTCRVvIo-_zsWiWAAAD
Data dikirim ke client: null
Data dikirim ke client: null